version: '3.9'

services: 

    # setup MongoDB cluster for production
    mongo-replica-setup:
        container_name: mongo-setup
        image: 'mongo-replica-set'
        restart: on-failure
        networks:
            - netApplication
        volumes:
        - ./.docker/mongodb/scripts/mongosetup.sh:/scripts/mongosetup.sh
        - ./.docker/mongodb/mongo_seed:/mongo_seed
        entrypoint: ["bash", "/scripts/mongosetup.sh" ]
        env_file:
            - .env
        #environment:
        #    MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        #    MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        depends_on:
            - mongo1
            - mongo2
            #- mongo3

    mongo1:
        hostname: 'mongo1'
        container_name: 'mongo1'
        image: 'mongo-replica-set'
        restart: 'on-failure'
        command: ["-f", "/etc/mongod.conf", 
                  "--keyFile", "/data/key/replica-set.key", 
                  "--replSet", "${MONGO_REPLICA_SET_NAME}", 
                  "--bind_ip_all",
                  "--storageEngine=inMemory"
                  #"--inMemorySizeGB=16",
                  #"--inMemoryStatisticsLogDelaySecs=0",
                  ]
        expose: 
            - 27017
        ports: 
            - 30001:27017 
        networks: 
            - netApplication
        volumes:
            - ./mongo1/db:/data/db
            #- ./mongo1/log:/var/log/mongodb
            - ./.docker/mongodb/initdb.d/:/docker-entrypoint-initdb.d/
            - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
        healthcheck:
            test: test $$(echo "rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
            interval: 30s
            start_period: 60s
        env_file:
            - .env
        #environment:
        #    MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        #    MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        #    MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

    mongo2:
        hostname: 'mongo2'
        container_name: 'mongo2'
        image: 'mongo-replica-set'
        command: ["-f", "/etc/mongod.conf", 
                  "--keyFile", "/data/key/replica-set.key", 
                  "--replSet", "${MONGO_REPLICA_SET_NAME}", 
                  "--bind_ip_all"]
        restart: 'on-failure'
        expose: 
            - 27017
        ports: 
            - 30002:27017  
        networks: 
            - netApplication
        volumes:
            - ./mongo2/db:/data/db
            #- ./mongo2/log:/var/log/mongodb
            - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
        env_file:
            - .env
        #environment:
        #    MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        #    MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        #    MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
        depends_on: 
            - mongo1

#    mongo3:
#        hostname: 'mongo3'
#        container_name: 'mongo3'
#        image: 'mongo-replica-set'
#        command: ["-f", "/etc/mongod.conf", "--keyFile", "/data/key/replica-set.key", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]
#        restart: 'on-failure'
#        expose: 
#            - 27017
#        ports: 
#            - 30003:27017  
#        networks: 
#            - netApplication
#        volumes:
#            - mongoData3:/data/db
#            - mongoLog3:/var/log/mongodb
#            - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
#        env_file:
#            - .env
#        environment:
#            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#            MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
#        depends_on: 
#            - mongo1

networks: 
    netApplication:
